Makefile
Makefile.dep
ae.c
ae.h
ae.o
ae_epoll.c
ae_evport.c
ae_kqueue.c
ae_select.c
anet.c
anet.h
anet.o
aof.c
aof.o
asciilogo.h
atomicvar.h
bio.c
bio.h
bio.o
bitops.c
bitops.o
blocked.c
blocked.o
childinfo.c
childinfo.o
cluster.c
cluster.h
cluster.o
config.c
config.h
config.o
crc16.c
crc16.o
crc64.c
crc64.h
crc64.o
db.c
db.o
debug.c
debug.o
debugmacro.h
defrag.c
defrag.o
dump.rdb
endianconv.c
endianconv.h
endianconv.o
evict.c
evict.o
expire.c
expire.o
fmacros.h
geo.c
geo.h
geo.o
geohash.c
geohash.h
geohash.o
geohash_helper.c
geohash_helper.h
geohash_helper.o
help.h
hyperloglog.c
hyperloglog.o
intset.c
intset.h
intset.o
latency.c
latency.h
latency.o
lazyfree.c
lazyfree.o
lzf.h
lzfP.h
lzf_c.c
lzf_c.o
lzf_d.c
lzf_d.o
memtest.c
memtest.o
mkreleasehdr.sh
module.c
module.o
modules
multi.c
multi.o
networking.c
networking.o
notify.c
notify.o
object.c
object.o
pqsort.c
pqsort.h
pqsort.o
pubsub.c
pubsub.o
quicklist.c
quicklist.h
quicklist.o
rand.c
rand.h
rand.o
rax.c
rax.h
rax.o
rax_malloc.h
rdb.c
rdb.h
rdb.o
redis-benchmark
redis-benchmark.c
redis-benchmark.o
redis-check-aof
redis-check-aof.c
redis-check-aof.o
redis-check-rdb
redis-check-rdb.c
redis-check-rdb.o
redis-cli
redis-cli.c
redis-cli.o
redis-sentinel
redis-server
redis-trib.rb
redisassert.h
redismodule.h
release.c
release.h
release.o
replication.c
replication.o
rio.c
rio.h
rio.o
scripting.c
scripting.o
sentinel.c
sentinel.o
server.c
server.h
server.o
setproctitle.c
setproctitle.o
sha1.c
sha1.h
sha1.o
siphash.c
siphash.o
slowlog.c
slowlog.h
slowlog.o
solarisfixes.h
sort.c
sort.o
sparkline.c
sparkline.h
sparkline.o
syncio.c
syncio.o
t_hash.c
t_hash.o
t_list.c
t_list.o
t_set.c
t_set.o
t_string.c
t_string.o
t_zset.c
t_zset.o
testhelp.h
util.c
util.h
util.o
valgrind.sup
version.h
ziplist.c
ziplist.h
ziplist.o
zipmap.c
zipmap.h
zipmap.o
zmalloc.c
zmalloc.h
zmalloc.o



1.==== finish
sds.c
sds.h
sds.o
sdsalloc.h
2.==== finish
adlist.c
adlist.h
adlist.o
3.==== finish
dict.c
dict.h
dict.o
4.==== zskiplist
server.h 一部分
t_zset.c 一部分






//=======
如何根据key算index？
h = dictHashKey(d, key);
idx = h & d->ht[0/1].sizemask;
he = d->ht[table].table[idx];

//=======
scan的时候索引为什么从高位开始加1？

如果从低位开始+1
   bucket size = 8； mask： 111
        001  
        010
        011
        100
      10001
   rehashing中：bucket size=16  mask： 1111
        如果我遍历到了 10001 -> &1111=001 这样在访问10001这个key的时候又会访问一遍001这个key,因为rehash之后这两个key的一个bucket。

如果从高位开始+1:
      https://mp.weixin.qq.com/s/ufoLJiXE0wU4Bc7ZbE9cDQ
      https://zhuanlan.zhihu.com/p/48989230